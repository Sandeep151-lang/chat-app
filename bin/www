#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var socket = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log(`${port}`)
});
server.on('error', onError);
server.on('listening', onListening);



const io = socket(server)
// let users = [{}]

// io.on("connection", (socket) => {
//   console.log('new connection')
//   socket.on('joined', ({ user }) => {
//     users[socket.id] = user;
//     socket.emit('welcome', { user: 'Admin', message: `${user} welcome to chat` })
//     socket.broadcast.emit('userjoined', { user: 'Admin', message: `${user} has joined` }, console.log(`${user} has joined`));


//     socket.on('disconnect', () => {
//       socket.broadcast.emit('leave', { user: 'Admin', user: `${users[socket.id]} user left` })

//     })


//     socket.on('message', ({ message, id }) => {
//       io.emit('sendMessage', { user: users[id], message })
//     })


//   })


// })

var users = [{}]

io.on("connection", (socket, res) => {
  console.log('new connection')
  socket.on('joined', ({ user }) => {
    users[socket.id] = user;
    // console.log(`${users[socket.id]} come back has joined`)
    console.log(user)

    socket.emit('welcome', { user: 'Admin', message: `${users[socket.id]} welcome to chat` })
    socket.broadcast.emit('userjoined', { user: 'Admin', message: `${users[socket.id]} has joined` })

  })

  socket.on('message', ({ message, id }) => {
    io.emit('sendMessage', { user: users[id], message, id })
  })
  socket.on('disconnect', () => {
    socket.broadcast.emit('leave', { user: 'Admin', message: `${users[socket.id]} left` })

  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
